type User {
    id: ID!
    username: String
    email: String
    phone: String
    password: String
    created_at: DateTime
    updated_at: DateTime
    photos_verified: Boolean
    fully_verified: Boolean
    hidden: Boolean
    attributes: UserAttribute! @hasOne
    auctions: [Auction!]! @hasMany
    streams: [Stream!]! @hasMany
    medias: [Media!]! @hasMany
    meetings_setting: [MeetingsSetting!]! @hasOne
}

input CreateUserInput {
    country_code: String!,
    phone_number: String!,
    password: String! @rules(apply: ["required", "min:8"]),
    confirmation_password: String!
}

extend type Query {
    user(id: ID! @eq): User @find(model: "App\\User")
}

extend type Mutation {
    createUser(input: CreateUserInput): User!

    updateUser(
        id: ID!,
        username: String @rules(apply: ["min:3", "unique:users"]),
        email: String @rules(apply: ["email", "unique:users"]),
    ): User!
    @middleware(checks: ["auth:api"])
    @update
#
#    deleteUser(id: ID!): User
#    @middleware(checks: ["auth:api"])
}

